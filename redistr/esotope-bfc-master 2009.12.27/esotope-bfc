#!/usr/bin/env python
# Esotope Brainfuck Compiler
# Copyright (c) 2009, Kang Seonghoon.

import sys
import getopt

try: import psyco; psyco.full()
except ImportError: pass

from bfc.compiler import Compiler
from bfc.parser import brainfuck as parser_bf, bfrle as parser_bfrle
from bfc.codegen import c as codegen_c

PARSERS = {'brainfuck': parser_bf, 'bfrle': parser_bfrle}
CODEGENS = {'c': codegen_c}


def usage(progname):
    print >>sys.stderr, '''\
Esotope Brainfuck compiler
Copyright (c) 2009, Kang Seonghoon.

Usage: %s [options] filename  (from file)
       %s [options] -         (from stdin)

Options:
-h, --help
    Shows this message.
-i FORMAT, --input-format FORMAT
    Sets the parser module. FORMAT can be "brainfuck" or "bfrle",
    and defaults to the extension supplied.
-f FORMAT, --output-format FORMAT
    Sets the code generator module. FORMAT can be "c", and defaults
    to "c" currently.
-s BITS, --cellsize BITS
    Sets the size of each memory size. BITS can be 8, 16 or 32, and
    defaults to 8.
-v, --verbose
    Prints more internal progress.
--debug
    Enables debugging output (as C comment) in the code.

For more information please visit http://esotope-bfc.googlecode.com/.
''' % (progname, progname)

def main(argv):
    try:
        opts, args = getopt.getopt(argv[1:], 'hi:f:s:v',
                ['help', 'input-format=', 'output-format=', 'cellsize=',
                 'verbose', 'debug'])
    except getopt.GetoptError, err:
        print >>sys.stderr, 'Error: %s' % err
        print >>sys.stderr, 'Type "%s --help" for usage.' % argv[0]
        return 1

    cellsize = 8
    informat = None
    outformat = 'c'
    verbose = debugging = False
    for opt, arg in opts:
        if opt in ('-h', '--help'):
            usage(argv[0])
            return 0
        elif opt in ('-i', '--input-format'):
            informat = arg.lower().strip()
            if informat not in PARSERS:
                print >>sys.stderr, 'Error: Invalid input format %r.' % arg
                return 1
        elif opt in ('-f', '--output-format'):
            outformat = arg.lower().strip()
            if outformat not in CODEGENS:
                print >>sys.stderr, 'Error: Invalid output format %r.' % arg
                return 1
        elif opt in ('-s', '--cellsize'):
            try:
                cellsize = int(arg)
                if cellsize not in (8, 16, 32): raise ValueError
            except:
                print >>sys.stderr, 'Error: Invalid cell size %r.' % arg
                return 1
        elif opt in ('-v', '--verbose'):
            verbose = True
        elif opt == '--debug':
            debugging = True
        else:
            assert False

    if not args:
        print >>sys.stderr, 'Type "%s --help" for usage.' % argv[0]
        return 1

    # determine informat via the file extension.
    if informat is None:
        if args[0].endswith('.bfrle'):
            informat = 'bfrle'
        else: #elif args[0].endswith('.b') or args[0].endswith('.bf'):
            informat = 'brainfuck'

    if args[0] == '-':
        fp = sys.stdin
    else:
        fp = open(args[0], 'r')

    compiler = Compiler(parser=PARSERS[informat].Parser,
                        codegen=CODEGENS[outformat].Generator,
                        cellsize=cellsize, debugging=debugging)
    compiler.compile(fp)
    return 0

if __name__ == '__main__':
    sys.exit(main(sys.argv))

